#include <fstream>
#include <iostream>
#include <string>
#include <thread>

#include <cpen333/process/shared_memory.h>
#include <cpen333/process/mutex.h>
#include "malware.h"

class MalChild {
	cpen333::process::shared_object<SharedStruct> memoryMal;
	cpen333::process::mutex mutexMal;

public:
	//constructor
	MalChild() : memoryMal("malware_shared_mem"), mutexMal("malware_mutex"){
	}

	void update_shared_memory(int integerUpdate){
		std::lock_guard<cpen333::process::mutex>mutexShared(mutexMal);
		if (integerUpdate == 0){
			if (memoryMal->integerA == INT_MAX) memoryMal->integerA = 0;
			else memoryMal->integerA++;
		}
		else{
			if (memoryMal->integerB == INT_MAX) memoryMal->integerB = 0;
			else memoryMal->integerB++;
		}
		std::cout << "integer A: " << memoryMal->integerA << std::endl;
		std::cout << "integer B: " << memoryMal->integerB << std::endl;
		return;
	}
};


int main(int argc, char* argv[]) {
	std::cout << "in child process main" << std::endl;
	if (argc < 1) {
		std::cout << " Error: need to pass in a process name, logfile, and number of messages" << std::endl;
		return -1;
	}
	MalChild test;
	//run_logger(argv[1], argv[2], std::atoi(argv[3]));

	test.update_shared_memory(std::atoi(argv[1]));

	return 0;
}